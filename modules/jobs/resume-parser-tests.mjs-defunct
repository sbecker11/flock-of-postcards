import { test } from 'node:test';
import assert from 'node:assert/strict';
import path from 'path';
import { fileURLToPath } from 'url';
import fs from 'fs/promises';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Import the resume parser module
import parseResume from './resumeParser.js';

// Helper function to read JSON file
async function readJSON(filename) {
  const filePath = path.join(__dirname, filename);
  const content = await fs.readFile(filePath, 'utf8');
  return JSON.parse(content);
}

test('parseResume handles PDF input correctly', async (t) => {
  const inputFileName = 'real-resume.pdf';
  const outputFileName = 'real-resume-pdf-parsed.json';
  const expectedFileName = 'real-resume-pdf.json';
  
  await parseResume(inputFileName, outputFileName);
  
  const parsedResume = await readJSON(outputFileName);
  const expectedResume = await readJSON(expectedFileName);
  
  assert.deepEqual(parsedResume, expectedResume, 'Parsed PDF resume should match the expected output');
  
  // Clean up
  await fs.unlink(path.join(__dirname, outputFileName));
});

test('parseResume handles DOCX input correctly', async (t) => {
  const inputFileName = 'real-resume.docx';
  const outputFileName = 'real-resume-docx-parsed.json';
  const expectedFileName = 'real-resume-docx.json';
  
  await parseResume(inputFileName, outputFileName);
  
  const parsedResume = await readJSON(outputFileName);
  const expectedResume = await readJSON(expectedFileName);
  
  assert.deepEqual(parsedResume, expectedResume, 'Parsed DOCX resume should match the expected output');
  
  // Clean up
  await fs.unlink(path.join(__dirname, outputFileName));
});

test('parseResume throws error for unsupported file format', async (t) => {
  const inputFileName = 'test_resume.txt';
  const outputFileName = 'test_resume_parsed.json';
  
  await assert.rejects(
    async () => {
      await parseResume(inputFileName, outputFileName);
    },
    {
      name: 'Error',
      message: 'Unsupported file format. Only PDF and DOCX are supported.'
    },
    'Should throw an error for unsupported file format'
  );
});

test('parseResume generates valid JSON according to schema', async (t) => {
  const inputFileName = 'real-resume.pdf';
  const outputFileName = 'real-resume-pdf-schema-test.json';
  
  await parseResume(inputFileName, outputFileName);
  
  const parsedResume = await readJSON(outputFileName);
  
  const requiredFields = [
    'contactInformation',
    'positionOrProfessionalTitle',
    'professionalSummary',
    'workExperience',
    'education',
    'skills',
    'certifications',
    'publications',
    'patents',
    'websites'
  ];
  
  for (const field of requiredFields) {
    assert(field in parsedResume, `Parsed resume should contain ${field}`);
  }
  
  assert(Array.isArray(parsedResume.workExperience), 'Work experience should be an array');
  assert(Array.isArray(parsedResume.education), 'Education should be an array');
  assert(Array.isArray(parsedResume.websites), 'Websites should be an array');
  
  // Clean up
  await fs.unlink(path.join(__dirname, outputFileName));
});

// New test to compare PDF and DOCX parsing results
test('parseResume produces consistent results for PDF and DOCX versions of the same resume', async (t) => {
  const pdfInputFileName = 'real-resume.pdf';
  const docxInputFileName = 'real-resume.docx';
  const pdfOutputFileName = 'real-resume-pdf-consistency-test.json';
  const docxOutputFileName = 'real-resume-docx-consistency-test.json';
  
  await parseResume(pdfInputFileName, pdfOutputFileName);
  await parseResume(docxInputFileName, docxOutputFileName);
  
  const pdfParsedResume = await readJSON(pdfOutputFileName);
  const docxParsedResume = await readJSON(docxOutputFileName);
  
  assert.deepEqual(pdfParsedResume, docxParsedResume, 'Parsed results should be consistent between PDF and DOCX versions');
  
  // Clean up
  await fs.unlink(path.join(__dirname, pdfOutputFileName));
  await fs.unlink(path.join(__dirname, docxOutputFileName));
});
